{
  "name": "linkedin -automation",
  "nodes": [
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        700,
        280
      ],
      "id": "7d3c3299-f08e-4867-b0c7-b146de8a2220",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        520,
        260
      ],
      "id": "bc193be1-9cd6-4513-bb41-312ef030334d",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Hqr0jT2Gb9cJ04Ka",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -20,
        0
      ],
      "id": "2b033348-ab3d-436b-8557-18f66d7b75b7",
      "name": "When chat message received",
      "webhookId": "f3dfc4a6-4052-49af-953b-3ed7e2d51623"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a social media strategist and LinkedIn personal branding expert.\n\nYour task: Write a high-converting LinkedIn post for my client work, based on the **day type**, **topic**, and **format best practices** below.\n\n---\n\nüìå General Guidelines:\n- Use a **storytelling style** in **first person (my perspective)**\n- The post should reflect how **I helped a client**\n- Mention a recent **timeframe** (e.g., ‚Äúlast Tuesday‚Äù or ‚Äúthis week‚Äù)\n- Start with a **relatable moment or situation**\n- Use üîπ bullets or ‚úÖ steps to explain the method or system used\n- Ensure post length is **300+ words**\n- Use **LinkedIn formatting best practices**: short lines, emojis, whitespace\n- End with a strong **CTA** like ‚ÄúDM me‚Äù, ‚ÄúComment üî•‚Äù, or ‚ÄúReply FREE‚Äù\n- Do **not** use real names or any image prompts\n\n---\n\nüóìÔ∏è Day Type: {{$json.day}}\n\nUse the following structure based on the day:\n\n- **Mon (Case Study):** Share a before-after result from a client project\n- **Tue (Value Drop):** Teach a tool, workflow, or strategy\n- **Wed (Story):** Share a struggle or realization while helping a client\n- **Thu (Offer):** Promote a soft offer like a free audit or review\n- **Fri (Client Win):** Share actual outcomes (leads, time saved, growth)\n\n---\n\nüìù Topic: {{$json.chatInput}}\n\n---\n\nüìå Post Format Examples That Attract Clients:\nUse one of these structures where relevant:\n\n1. **Case Study / Before-After**  \n‚ÄúClient was spending 6 hours/week writing posts. Now it‚Äôs 15 mins with AI. Here‚Äôs how we did it üëá‚Äù  \nüëâ DM me ‚ÄúAUTOMATE‚Äù if you want this.\n\n2. **Problem ‚Üí Insight ‚Üí CTA**  \n‚ÄúMost coaches write posts manually. The result? Burnout.  \nI built a workflow that creates 7 posts/week from a Google Sheet.‚Äù  \nüí¨ Drop a üî• in the comments to try it.\n\n3. **Tutorial (Mini Value Drop)**  \n\"Want to auto-schedule LinkedIn posts from a Google Sheet?  \nHere‚Äôs how I did it using n8n + GPT + Buffer:  \n1Ô∏è‚É£ Connect Sheet  \n2Ô∏è‚É£ Use GPT for rewriting  \n3Ô∏è‚É£ Auto-post to LinkedIn\"  \nDM me ‚ÄúSCHEDULE‚Äù if you want help.\n\n4. **Story with Lesson**  \n‚ÄúI was terrified of selling. So I built workflows that do it for me.  \nNow I get 3 inbound leads/week ‚Äî without cold DMs.  \nLesson: Systems scale. Hustling doesn‚Äôt.‚Äù\n\n5. **Lead Magnet / Offer**  \n\"üö® Free Download: My AI LinkedIn workflow for solopreneurs.  \nIncludes Google Sheet + GPT prompt + n8n setup.  \nDrop ‚ÄòFREE‚Äô and I‚Äôll send it.\"\n\n---\n\nNow write the **final LinkedIn post**, fully formatted and ready to publish.\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        680,
        0
      ],
      "id": "45961103-d3e9-451b-bbf4-c9eb7921083d",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI visual strategist that converts LinkedIn posts into **real photo-style image prompts** (not AI art or illustrations), designed to attract clients and professionals on LinkedIn.\n\nüìå Objective:\nGenerate a **photo-realistic image prompt** based on the post below. The image should:\n\n- Look like a real photo (not digital art or 3D)\n- Contain **no human faces or full people**\n- Show hands, devices, objects, workspaces, screens, tools, environments, etc.\n- Feel professional, minimal, trustworthy, and aspirational\n- Communicate the branded message or value of the post visually\n- Include contextual elements (like laptops, dashboards, charts, documents, office setups)\n\n---\n\nüéØ **Post Content to Convert:**\n{{ $json.output }}\n\n---\n\nüé® **Output Format:**\nProvide only the photo-style prompt. Make sure it clearly communicates the core idea and appeal of the post without using human faces or models.\n\n\n{\n  \"binary\": {\n    \"data\": {\n      \"mimeType\": \"image/png\",\n      \"fileName\": \"img-LP5tGNtfbe9hvy5tTFPw0JL2.png\"\n    }\n  }\n}\n\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1000,
        0
      ],
      "id": "04415f31-4832-4355-b3b9-d734dc1fab3a",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('AI Agent').item.json.output }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1000,
        300
      ],
      "id": "0cc98eac-b5b2-46d3-a5b3-a2abf727d4f4",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/images/generations",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"dall-e-3\",\n  \"prompt\": \"={{ $json.cleanedOutput }}\",\n  \"size\": \"1024x1024\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1540,
        0
      ],
      "id": "53b63047-804f-47c3-8a15-daa5d27fb553",
      "name": "HTTP Request",
      "credentials": {
        "openAiApi": {
          "id": "Hqr0jT2Gb9cJ04Ka",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const imageUrl = $json.data[0].url;\n\nreturn [{ json: { imageUrl } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1720,
        0
      ],
      "id": "abf37171-11bd-4181-808f-03e427988d32",
      "name": "Code1"
    },
    {
      "parameters": {
        "url": "={{ $json.imageUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "image"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1880,
        0
      ],
      "id": "71bccc14-68ce-43db-8cef-53fa8ec63e44",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "person": "kb5sRQEyH3",
        "text": "={{ $('AI Agent').item.json.output }}",
        "shareMediaCategory": "IMAGE",
        "binaryPropertyName": "image",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.linkedIn",
      "typeVersion": 1,
      "position": [
        1360,
        200
      ],
      "id": "868ed33e-77b3-414c-afc7-3f3eb0797afc",
      "name": "Create a post",
      "credentials": {
        "linkedInOAuth2Api": {
          "id": "kO2RwoMtgTzls3Zi",
          "name": "LinkedIn account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let data = $input.all()\nconst outputData = data[0].json.output.replace(/\\n/g, ' ');\n\nreturn [\n  {\n    json: {\n      cleanedOutput: outputData\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        0
      ],
      "id": "83474838-7dc2-47c2-a812-c264caf9ffa3",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1GH62tSjz00n5LOqkQ9horGPgk1j3W_lF8DLd30Q-9Ec",
          "mode": "list",
          "cachedResultName": "linkedin-post",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GH62tSjz00n5LOqkQ9horGPgk1j3W_lF8DLd30Q-9Ec/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GH62tSjz00n5LOqkQ9horGPgk1j3W_lF8DLd30Q-9Ec/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Description ": "={{ $('AI Agent').item.json.output }}",
            "Image Url ": "={{ $('HTTP Request1').item.json.imageUrl }}",
            "Date ": "=${{ $now }}"
          },
          "matchingColumns": [
            "Date "
          ],
          "schema": [
            {
              "id": "Date ",
              "displayName": "Date ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Description ",
              "displayName": "Description ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Image Url ",
              "displayName": "Image Url ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1600,
        200
      ],
      "id": "b58cf397-69dc-4d24-82c1-68b9cf1089ed",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "MPvqpYUGAt6gXT0V",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst now = new Date();\nconst dayName = days[now.getDay()];\n\nreturn [\n  {\n    json: {\n      day: dayName\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        0
      ],
      "id": "606e9763-7735-4f0f-b607-08c282c9ae04",
      "name": "Code2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "77e4520c-688a-4249-a5c4-4c3f19553919",
              "leftValue": "={{ $json.day }}",
              "rightValue": "Sunday",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "899e6e08-4401-4694-a382-474a85021248",
              "leftValue": "={{ $json.day }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "28a50e52-aaba-45bb-90e2-0b9a1913e44d",
              "leftValue": "={{ $json.day }}",
              "rightValue": "Saturday",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        420,
        0
      ],
      "id": "46aaa59c-6f89-4fa5-877b-8eb44a57e06d",
      "name": "If"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Create a post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a post": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e0ed21b3-229c-4bc8-9994-79b07685dd51",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2a40570b3af64bf81af3ce3fb41cdd360118dab3c5efb79c58e0c17eaad8095b"
  },
  "id": "RCc0qrVH6rTDQJV7",
  "tags": []
}